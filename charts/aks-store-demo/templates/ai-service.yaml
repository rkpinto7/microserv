{{- if .Values.aiService.create }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: ai-service-configmap
data:
  AZURE_OPENAI_DEPLOYMENT_NAME: "{{ .Values.aiService.modelDeploymentName }}"
  AZURE_OPENAI_ENDPOINT: "{{ .Values.aiService.openAiEndpoint }}"
  {{- if .Values.aiService.useAzureOpenAi }}
  USE_AZURE_OPENAI: "True"
  {{- else }}
  USE_AZURE_OPENAI: "False"
  OPENAI_ORG_ID: "{{ .Values.aiService.openAiOrgId }}"
  {{- end }}
  {{- if .Values.aiService.useAzureAd }}
  USE_AZURE_AD: "True"
  {{- else }}
  USE_AZURE_AD: "False"
  {{- end }}
---
{{- if eq .Values.aiService.useAzureAd false }}
apiVersion: v1
kind: Secret
metadata:
  name: ai-service-secrets
data:
  OPENAI_API_KEY: "{{ .Values.aiService.openAiKey | b64enc }}"
---
{{- end }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-service-account
  annotations:
    azure.workload.identity/client-id: "{{ .Values.aiService.managedIdentityClientId }}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-service
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: ai-service
  template:
    metadata:
      labels:
        app: ai-service
        azure.workload.identity/use: "true"
    spec:
      serviceAccount: ai-service-account
      nodeSelector:
        "kubernetes.io/os": linux
      containers:
      - name: order-service
        image: ghcr.io/azure-samples/aks-store-demo/ai-service:1.0.0
        ports:
        - containerPort: 5001
        envFrom:
        - configMapRef:
            name: ai-service-configmap
        {{- if eq .Values.aiService.useAzureAd false }}
        - secretRef:
            name: ai-service-secrets
        {{- end }}
        resources:
          requests:
            cpu: 20m
            memory: 50Mi
          limits:
            cpu: 30m
            memory: 65Mi
        startupProbe:
          httpGet:
            path: /health
            port: 5001
          initialDelaySeconds: 60
          failureThreshold: 3
          timeoutSeconds: 3
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 5001
          initialDelaySeconds: 3
          failureThreshold: 3
          timeoutSeconds: 3
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 5001
          failureThreshold: 3
          initialDelaySeconds: 3
          timeoutSeconds: 3
          periodSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: ai-service
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 5001
    targetPort: 5001
  selector:
    app: ai-service
{{- end }}